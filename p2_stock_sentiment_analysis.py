# -*- coding: utf-8 -*-
"""P2_Stock_sentiment_analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1x2oXRblM-vClcq1rZ59Z8iklk-YDUPlW

## **Problem Statement**- Stock Sentiment Analysis Using News Headlines ##

Using NLP


0 is when stock price decreased or remained same

1 is when the stock price increased
"""

import pandas as pd
df = pd.read_csv('Data.csv', encoding = "ISO-8859-1")
df.head()

train = df[df['Date'] < '20150101']
test = df[df['Date'] > '20141231']

"""### Feature Engineering"""

# Removing Punctuation

data = train.iloc[:, 2:27]
data.replace("[^a-zA-z]", " ", regex=True, inplace=True) # Aprat from A-z remove everything from col 2 to 27

# Renaming column names for ease of access

list1 = [i for i in range(25)]
new_Index = [str(i) for i in list1]
data.columns = new_Index
data.head()

# Converting all headlines into lower cases

for index in new_Index:
  data[index] = data[index].str.lower()
data.head(1)

' '.join(str(x) for x in data.iloc[1,0:25])  # for index 1

# TO combine all headlines in row as a paragraph  for every index

headlines = []
for row in range(0,len(data.index)):
    headlines.append(' '.join(str(x) for x in data.iloc[row,0:25]))

headlines[0]

from sklearn.feature_extraction.text import CountVectorizer
from sklearn.ensemble import RandomForestClassifier

# Implement BOW
countvector = CountVectorizer(ngram_range=(2,2))
traindataset = countvector.fit_transform(headlines)

# Implement Random Forest Classifier
randomclassifier = RandomForestClassifier(n_estimators=200, criterion = 'entropy')
randomclassifier.fit(traindataset,train['Label'])

# Predict for the test dataset
test_transform = []
for row in range(0,len(test.index)):
    test_transform.append(' '.join(str(x) for x in test.iloc[row,2:27]))
test_dataset = countvector.transform(test_transform)
predictions = randomclassifier.predict(test_dataset)

## Import library to check accuracy
from sklearn.metrics import classification_report,confusion_matrix,accuracy_score

matrix=confusion_matrix(test['Label'],predictions)
print(matrix)
score=accuracy_score(test['Label'],predictions)
print(score)
report=classification_report(test['Label'],predictions)
print(report)